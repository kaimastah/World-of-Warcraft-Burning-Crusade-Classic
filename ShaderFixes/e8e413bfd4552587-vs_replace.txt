// water 2
cbuffer cb1 : register(b1)
{
  float4 cb1[31];
}




// 3Dmigoto declarations
#define cmp -
Texture1D<float4> IniParams : register(t120);
Texture2D<float4> StereoParams : register(t125);


void main(
  float3 v0 : POSITION0,
  float4 v1 : COLOR0,
  float4 v2 : TEXCOORD0,
  float2 v3 : TEXCOORD1,
  out float4 o0 : SV_POSITION0,
  out float4 o1 : TEXCOORD0,
  out float4 o2 : TEXCOORD1,
  out float4 o3 : TEXCOORD2,
  out float4 o4 : TEXCOORD3,
  out float4 o5 : TEXCOORD4,
  out float4 o6 : TEXCOORD5,
  out float4 o7 : TEXCOORD6,
  out float2 o8 : TEXCOORD7,
  out float3 o9 : COLOR0,
  out float o10 : SV_CLIPDISTANCE0)
{
  float4 r0,r1,r2;
  uint4 bitmask, uiDest;
  float4 fDest;

  float4 stereo = StereoParams.Load(0);
  float4 iniParams = IniParams.Load(0);

  r0.xyzw = cb1[5].xyzw * v0.yyyy;
  r0.xyzw = v0.xxxx * cb1[4].xyzw + r0.xyzw;
  r0.xyzw = v0.zzzz * cb1[6].xyzw + r0.xyzw;
  r0.xyzw = cb1[7].xyzw + r0.xyzw;
  r1.xyzw = cb1[9].xyzw * r0.yyyy;
  r1.xyzw = r0.xxxx * cb1[8].xyzw + r1.xyzw;
  r1.xyzw = r0.zzzz * cb1[10].xyzw + r1.xyzw;
  r1.xyzw = r0.wwww * cb1[11].xyzw + r1.xyzw;
  o0.xyzw = r1.xyzw;
  o7.xyzw = r1.xyzw;
  o1.xyz = r0.xyz;
  r0.x = dot(cb1[12].xyz, r0.xyz);
  o10.x = cb1[12].w + r0.x;
  r0.xy = float2(0.5,0.5) + v2.xy;
  r0.xy = float2(-0.03125,-0.03125) * r0.xy;
  r0.yz = cb1[18].xy * r0.yy;
  r0.xy = r0.xx * cb1[17].xy + r0.yz;
  r0.xy = cb1[20].xy + r0.xy;
  r0.x = -cb1[29].z + r0.x;
  r0.zw = cb1[26].yx * r0.yy;
  r0.zw = r0.xx * cb1[25].yx + r0.zw;
  o2.zw = cb1[28].yx + r0.zw;
  r0.zw = float2(0.03125,0.03125) * v2.xy;
  r1.xy = cb1[14].xy * r0.ww;
  r0.zw = r0.zz * cb1[13].xy + r1.xy;
  r0.zw = cb1[16].xy + r0.zw;
  r1.y = r0.w;
  r1.zw = cb1[26].yx * r1.yy;
  r1.x = cb1[29].y + r0.z;
  r2.xy = float2(228,228) * r0.zw;
  r0.zw = r1.xx * cb1[25].yx + r1.zw;
  o2.xy = cb1[28].yx + r0.zw;
  r0.z = 32 * cb1[29].w;
  r1.xy = r0.zz * r1.xy;
  r0.xy = r0.zz * r0.xy;
  r0.zw = cb1[26].yx * r1.yy;
  r0.zw = r1.xx * cb1[25].yx + r0.zw;
  o3.xy = cb1[28].yx + r0.zw;
  r0.yz = cb1[26].yx * r0.yy;
  r0.xy = r0.xx * cb1[25].yx + r0.yz;
  o3.zw = cb1[28].yx + r0.xy;
  r0.xy = cb1[29].xx * float2(4,2) + v0.xy;
  r0.x = sin(r0.x);
  r0.y = cos(r0.y);
  r1.z = r0.x * 0.0500000007 + r2.x;
  r1.xy = float2(0.100000001,0.100000001) * r0.xy;
  r1.w = r0.y * 0.0500000007 + r2.y;
  r2.zw = float2(0.5,0.5);
  o4.xyzw = r2.xyzw + r1.xyzw;
  r0.xy = cb1[22].xy * v3.yy;
  r0.xy = v3.xx * cb1[21].xy + r0.xy;
  o5.xy = cb1[24].xy + r0.xy;
  o5.zw = v3.xy;
  r0.xyz = cb1[1].xyz * v0.yyy;
  r0.xyz = v0.xxx * cb1[0].xyz + r0.xyz;
  r0.xyz = v0.zzz * cb1[2].xyz + r0.xyz;
  r0.xyz = cb1[3].xyz + r0.xyz;
  o6.xyz = r0.xyz;
  r0.xy = -cb1[30].xy + r0.xy;
  o8.xy = cb1[30].zw * r0.xy;
  o9.xyz = v1.xyz;
  
  o7.x+=stereo.x * (o7.w - stereo.y);
  
  return;
}

/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
//
// Generated by Microsoft (R) D3D Shader Disassembler
//
//   using 3Dmigoto v1.3.16 on Fri Jul  2 09:18:24 2021
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// POSITION                 0   xyz         0     NONE   float   xyz
// COLOR                    0   xyzw        1     NONE   float   xyz
// TEXCOORD                 0   xy          2     NONE   float   xy
// TEXCOORD                 1   xy          3     NONE   float   xy
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyzw        0      POS   float   xyzw
// TEXCOORD                 0   xyz         1     NONE   float   xyz
// TEXCOORD                 1   xyzw        2     NONE   float   xyzw
// TEXCOORD                 2   xyzw        3     NONE   float   xyzw
// TEXCOORD                 3   xyzw        4     NONE   float   xyzw
// TEXCOORD                 4   xyzw        5     NONE   float   xyzw
// TEXCOORD                 5   xyz         6     NONE   float   xyz
// TEXCOORD                 6   xyzw        7     NONE   float   xyzw
// TEXCOORD                 7   xy          8     NONE   float   xy
// COLOR                    0   xyz         9     NONE   float   xyz
// SV_CLIPDISTANCE          0   x          10  CLIPDST   float   x
//
vs_5_0
dcl_globalFlags refactoringAllowed
dcl_constantbuffer CB1[31], immediateIndexed
dcl_input v0.xyz
dcl_input v1.xyz
dcl_input v2.xy
dcl_input v3.xy
dcl_output_siv o0.xyzw, position
dcl_output o1.xyz
dcl_output o2.xyzw
dcl_output o3.xyzw
dcl_output o4.xyzw
dcl_output o5.xyzw
dcl_output o6.xyz
dcl_output o7.xyzw
dcl_output o8.xy
dcl_output o9.xyz
dcl_output_siv o10.x, clip_distance
dcl_temps 3
mul r0.xyzw, v0.yyyy, cb1[5].xyzw
mad r0.xyzw, v0.xxxx, cb1[4].xyzw, r0.xyzw
mad r0.xyzw, v0.zzzz, cb1[6].xyzw, r0.xyzw
add r0.xyzw, r0.xyzw, cb1[7].xyzw
mul r1.xyzw, r0.yyyy, cb1[9].xyzw
mad r1.xyzw, r0.xxxx, cb1[8].xyzw, r1.xyzw
mad r1.xyzw, r0.zzzz, cb1[10].xyzw, r1.xyzw
mad r1.xyzw, r0.wwww, cb1[11].xyzw, r1.xyzw
mov o0.xyzw, r1.xyzw
mov o7.xyzw, r1.xyzw
mov o1.xyz, r0.xyzx
dp3 r0.x, cb1[12].xyzx, r0.xyzx
add o10.x, r0.x, cb1[12].w
add r0.xy, v2.xyxx, l(0.500000, 0.500000, 0.000000, 0.000000)
mul r0.xy, r0.xyxx, l(-0.031250, -0.031250, 0.000000, 0.000000)
mul r0.yz, r0.yyyy, cb1[18].xxyx
mad r0.xy, r0.xxxx, cb1[17].xyxx, r0.yzyy
add r0.xy, r0.xyxx, cb1[20].xyxx
add r0.x, r0.x, -cb1[29].z
mul r0.zw, r0.yyyy, cb1[26].yyyx
mad r0.zw, r0.xxxx, cb1[25].yyyx, r0.zzzw
add o2.zw, r0.zzzw, cb1[28].yyyx
mul r0.zw, v2.xxxy, l(0.000000, 0.000000, 0.031250, 0.031250)
mul r1.xy, r0.wwww, cb1[14].xyxx
mad r0.zw, r0.zzzz, cb1[13].xxxy, r1.xxxy
add r0.zw, r0.zzzw, cb1[16].xxxy
mov r1.y, r0.w
mul r1.zw, r1.yyyy, cb1[26].yyyx
add r1.x, r0.z, cb1[29].y
mul r2.xy, r0.zwzz, l(228.000000, 228.000000, 0.000000, 0.000000)
mad r0.zw, r1.xxxx, cb1[25].yyyx, r1.zzzw
add o2.xy, r0.zwzz, cb1[28].yxyy
mul r0.z, cb1[29].w, l(32.000000)
mul r1.xy, r1.xyxx, r0.zzzz
mul r0.xy, r0.xyxx, r0.zzzz
mul r0.zw, r1.yyyy, cb1[26].yyyx
mad r0.zw, r1.xxxx, cb1[25].yyyx, r0.zzzw
add o3.xy, r0.zwzz, cb1[28].yxyy
mul r0.yz, r0.yyyy, cb1[26].yyxy
mad r0.xy, r0.xxxx, cb1[25].yxyy, r0.yzyy
add o3.zw, r0.xxxy, cb1[28].yyyx
mad r0.xy, cb1[29].xxxx, l(4.000000, 2.000000, 0.000000, 0.000000), v0.xyxx
sincos r0.x, null, r0.x
sincos null, r0.y, r0.y
mad r1.z, r0.x, l(0.050000), r2.x
mul r1.xy, r0.xyxx, l(0.100000, 0.100000, 0.000000, 0.000000)
mad r1.w, r0.y, l(0.050000), r2.y
mov r2.zw, l(0,0,0.500000,0.500000)
add o4.xyzw, r1.xyzw, r2.xyzw
mul r0.xy, v3.yyyy, cb1[22].xyxx
mad r0.xy, v3.xxxx, cb1[21].xyxx, r0.xyxx
add o5.xy, r0.xyxx, cb1[24].xyxx
mov o5.zw, v3.xxxy
mul r0.xyz, v0.yyyy, cb1[1].xyzx
mad r0.xyz, v0.xxxx, cb1[0].xyzx, r0.xyzx
mad r0.xyz, v0.zzzz, cb1[2].xyzx, r0.xyzx
add r0.xyz, r0.xyzx, cb1[3].xyzx
mov o6.xyz, r0.xyzx
add r0.xy, r0.xyxx, -cb1[30].xyxx
mul o8.xy, r0.xyxx, cb1[30].zwzz
mov o9.xyz, v1.xyzx
ret
// Approximately 0 instruction slots used

//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
