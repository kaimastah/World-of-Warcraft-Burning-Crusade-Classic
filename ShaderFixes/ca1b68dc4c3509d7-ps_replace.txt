// Shadows Fair
Texture2D<float4> t6 : register(t6);

Texture2D<float4> t5 : register(t5);

Texture2D<float4> t2 : register(t2);

Texture2D<float4> t1 : register(t1);

Texture2D<float4> t0 : register(t0);

SamplerComparisonState s6_s : register(s6);

SamplerComparisonState s5_s : register(s5);

SamplerState s2_s : register(s2);

SamplerState s1_s : register(s1);

SamplerState s0_s : register(s0);

cbuffer cb1 : register(b1)
{
  float4 cb1[16];
}

cbuffer cb13 : register(b13)
{
  float4 cb13[1];
}


// 3Dmigoto declarations
#define cmp -
Texture1D<float4> IniParams : register(t120);
Texture2D<float4> StereoParams : register(t125);


void main(
  float4 v0 : SV_POSITION0,
  float4 v1 : TEXCOORD0,
  float4 v2 : TEXCOORD1,
  out float4 o0 : SV_TARGET0)
{
  float4 r0,r1,r2,r3,r4;
  uint4 bitmask, uiDest;
  float4 fDest;
  
  float4 stereo = StereoParams.Load(0);

  r0.xyzw = t0.Sample(s0_s, v1.xy).xyzw;
  r1.z = t1.Sample(s1_s, v1.xy).x;
  r1.w = t2.Sample(s2_s, v1.xy).x;
  r0.xyz = r0.xyz * float3(2,2,2) + float3(-1,-1,-1);
  r2.x = cmp(cb1[12].z == 0.000000);
  r2.yzw = v2.xyz * r1.zzz;
  r2.yzw = cb1[12].yyy * r2.yzw;
  
  r2.y-=stereo.x * (r2.w - stereo.y) / cb13[0].x;
  
  r1.xy = v2.xy;
  r1.xyz = r2.xxx ? r2.yzw : r1.xyz;
  r2.x = dot(cb1[13].xyz, r0.xyz);
  r2.x = 1 + -abs(r2.x);
  r2.x = max(0, r2.x);
  r2.x = r1.z * 0.0120000001 + r2.x;
  r0.xyz = r2.xxx * r0.xyz;
  r2.xyz = r0.xyz * float3(0.100000001,0.100000001,0.100000001) + r1.xyz;
  r2.w = 1;
  r3.x = dot(r2.xyzw, cb1[0].xyzw);
  r3.y = dot(r2.xyzw, cb1[1].xyzw);
  r0.x = dot(r2.xyzw, cb1[2].xyzw);
  r0.y = cmp(0 < r0.w);
  if (r0.y != 0) {
    r0.y = max(abs(r3.x), abs(r3.y));
    r0.z = cmp(r0.y < 1);
    if (r0.z != 0) {
      r0.z = cmp(cb1[12].w == 0.000000);
      if (r0.z != 0) {
        r0.y = saturate(r0.y * -3.4482758 + 3.41379309);
        r3.zw = r3.xy * float2(0.5,0.5) + float2(0.5,0.5);
        r1.xy = cb1[14].xy + r3.zw;
        r2.xy = r3.xw * float2(0.5,1) + float2(0.5,0);
        r2.zw = cb1[14].zw + r2.xy;
        r4.xyzw = cb1[15].xyzw + r2.xyxy;
        r0.z = t6.SampleCmpLevelZero(s6_s, r2.xy, r0.x).x;
        r1.x = t6.SampleCmpLevelZero(s6_s, r1.xy, r0.x).x;
        r0.z = r1.x + r0.z;
        r1.x = t6.SampleCmpLevelZero(s6_s, r2.zw, r0.x).x;
        r0.z = r1.x + r0.z;
        r1.x = t6.SampleCmpLevelZero(s6_s, r4.xy, r0.x).x;
        r0.z = r1.x + r0.z;
        r1.x = t6.SampleCmpLevelZero(s6_s, r4.zw, r0.x).x;
        r0.z = r1.x + r0.z;
        r0.z = r0.z * 0.200000003 + -1;
        r0.y = r0.y * r0.z + 1;
      } else {
        r1.xy = r3.xy * float2(0.5,0.5) + float2(0.5,0.5);
        r0.y = t6.SampleCmpLevelZero(s6_s, r1.xy, r0.x).x;
      }
    } else {
      r0.y = 1;
    }
  } else {
    r0.y = 1;
  }
  r0.z = cmp(r0.w < 1);
  if (r0.z != 0) {
    r0.z = max(abs(r3.x), abs(r3.y));
    r1.x = cmp(r0.z < 1);
    if (r1.x != 0) {
      r0.z = saturate(r0.z * -3.4482758 + 3.41379309);
      r1.xy = r3.xy * float2(0.5,0.5) + float2(0.5,0.5);
      r2.xyzw = cb1[14].xyzw + r1.xyxy;
      r3.xyzw = cb1[15].xyzw + r1.xyxy;
      r1.x = t5.SampleCmpLevelZero(s5_s, r1.xy, r0.x).x;
      r1.y = t5.SampleCmpLevelZero(s5_s, r2.xy, r0.x).x;
      r1.x = r1.x + r1.y;
      r1.y = t5.SampleCmpLevelZero(s5_s, r2.zw, r0.x).x;
      r1.x = r1.x + r1.y;
      r1.y = t5.SampleCmpLevelZero(s5_s, r3.xy, r0.x).x;
      r1.x = r1.x + r1.y;
      r0.x = t5.SampleCmpLevelZero(s5_s, r3.zw, r0.x).x;
      r0.x = r1.x + r0.x;
      r0.x = r0.x * 0.200000003 + -1;
      r0.x = r0.z * r0.x + 1;
    } else {
      r0.x = 1;
    }
  } else {
    r0.x = 1;
  }
  r0.y = r0.y + -r0.x;
  o0.x = r0.w * r0.y + r0.x;
  o0.y = r1.w;
  o0.z = r0.w;
  o0.w = 1;
  return;
}

/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
//
// Generated by Microsoft (R) D3D Shader Disassembler
//
//   using 3Dmigoto v1.3.16 on Tue Jun  1 22:45:39 2021
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyzw        0      POS   float
// TEXCOORD                 0   xy          1     NONE   float   xy
// TEXCOORD                 1   xyzw        2     NONE   float   xyz
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_TARGET                0   xyzw        0   TARGET   float   xyzw
//
ps_5_0
dcl_globalFlags refactoringAllowed
dcl_constantbuffer CB1[16], immediateIndexed
dcl_sampler s0, mode_default
dcl_sampler s1, mode_default
dcl_sampler s2, mode_default
dcl_sampler s5, mode_comparison
dcl_sampler s6, mode_comparison
dcl_resource_texture2d (float,float,float,float) t0
dcl_resource_texture2d (float,float,float,float) t1
dcl_resource_texture2d (float,float,float,float) t2
dcl_resource_texture2d (float,float,float,float) t5
dcl_resource_texture2d (float,float,float,float) t6
dcl_input_ps linear v1.xy
dcl_input_ps linear v2.xyz
dcl_output o0.xyzw
dcl_temps 5
sample_indexable(texture2d)(float,float,float,float) r0.xyzw, v1.xyxx, t0.xyzw, s0
sample_indexable(texture2d)(float,float,float,float) r1.z, v1.xyxx, t1.yzxw, s1
sample_indexable(texture2d)(float,float,float,float) r1.w, v1.xyxx, t2.yzwx, s2
mad r0.xyz, r0.xyzx, l(2.000000, 2.000000, 2.000000, 0.000000), l(-1.000000, -1.000000, -1.000000, 0.000000)
eq r2.x, cb1[12].z, l(0.000000)
mul r2.yzw, r1.zzzz, v2.xxyz
mul r2.yzw, r2.yyzw, cb1[12].yyyy
mov r1.xy, v2.xyxx
movc r1.xyz, r2.xxxx, r2.yzwy, r1.xyzx
dp3 r2.x, cb1[13].xyzx, r0.xyzx
add r2.x, -|r2.x|, l(1.000000)
max r2.x, r2.x, l(0.000000)
mad r2.x, r1.z, l(0.012000), r2.x
mul r0.xyz, r0.xyzx, r2.xxxx
mad r2.xyz, r0.xyzx, l(0.100000, 0.100000, 0.100000, 0.000000), r1.xyzx
mov r2.w, l(1.000000)
dp4 r3.x, r2.xyzw, cb1[0].xyzw
dp4 r3.y, r2.xyzw, cb1[1].xyzw
dp4 r0.x, r2.xyzw, cb1[2].xyzw
lt r0.y, l(0.000000), r0.w
if_nz r0.y
  max r0.y, |r3.y|, |r3.x|
  lt r0.z, r0.y, l(1.000000)
  if_nz r0.z
    eq r0.z, cb1[12].w, l(0.000000)
    if_nz r0.z
      mad_sat r0.y, r0.y, l(-3.44827580), l(3.413793)
      mad r3.zw, r3.xxxy, l(0.000000, 0.000000, 0.500000, 0.500000), l(0.000000, 0.000000, 0.500000, 0.500000)
      add r1.xy, r3.zwzz, cb1[14].xyxx
      mad r2.xy, r3.xwxx, l(0.500000, 1.000000, 0.000000, 0.000000), l(0.500000, 0.000000, 0.000000, 0.000000)
      add r2.zw, r2.xxxy, cb1[14].zzzw
      add r4.xyzw, r2.xyxy, cb1[15].xyzw
      sample_c_lz_indexable(texture2d)(float,float,float,float) r0.z, r2.xyxx, t6.xxxx, s6, r0.x
      sample_c_lz_indexable(texture2d)(float,float,float,float) r1.x, r1.xyxx, t6.xxxx, s6, r0.x
      add r0.z, r0.z, r1.x
      sample_c_lz_indexable(texture2d)(float,float,float,float) r1.x, r2.zwzz, t6.xxxx, s6, r0.x
      add r0.z, r0.z, r1.x
      sample_c_lz_indexable(texture2d)(float,float,float,float) r1.x, r4.xyxx, t6.xxxx, s6, r0.x
      add r0.z, r0.z, r1.x
      sample_c_lz_indexable(texture2d)(float,float,float,float) r1.x, r4.zwzz, t6.xxxx, s6, r0.x
      add r0.z, r0.z, r1.x
      mad r0.z, r0.z, l(0.200000), l(-1.000000)
      mad r0.y, r0.y, r0.z, l(1.000000)
    else
      mad r1.xy, r3.xyxx, l(0.500000, 0.500000, 0.000000, 0.000000), l(0.500000, 0.500000, 0.000000, 0.000000)
      sample_c_lz_indexable(texture2d)(float,float,float,float) r0.y, r1.xyxx, t6.xxxx, s6, r0.x
    endif
  else
    mov r0.y, l(1.000000)
  endif
else
  mov r0.y, l(1.000000)
endif
lt r0.z, r0.w, l(1.000000)
if_nz r0.z
  max r0.z, |r3.y|, |r3.x|
  lt r1.x, r0.z, l(1.000000)
  if_nz r1.x
    mad_sat r0.z, r0.z, l(-3.44827580), l(3.413793)
    mad r1.xy, r3.xyxx, l(0.500000, 0.500000, 0.000000, 0.000000), l(0.500000, 0.500000, 0.000000, 0.000000)
    add r2.xyzw, r1.xyxy, cb1[14].xyzw
    add r3.xyzw, r1.xyxy, cb1[15].xyzw
    sample_c_lz_indexable(texture2d)(float,float,float,float) r1.x, r1.xyxx, t5.xxxx, s5, r0.x
    sample_c_lz_indexable(texture2d)(float,float,float,float) r1.y, r2.xyxx, t5.xxxx, s5, r0.x
    add r1.x, r1.y, r1.x
    sample_c_lz_indexable(texture2d)(float,float,float,float) r1.y, r2.zwzz, t5.xxxx, s5, r0.x
    add r1.x, r1.y, r1.x
    sample_c_lz_indexable(texture2d)(float,float,float,float) r1.y, r3.xyxx, t5.xxxx, s5, r0.x
    add r1.x, r1.y, r1.x
    sample_c_lz_indexable(texture2d)(float,float,float,float) r0.x, r3.zwzz, t5.xxxx, s5, r0.x
    add r0.x, r0.x, r1.x
    mad r0.x, r0.x, l(0.200000), l(-1.000000)
    mad r0.x, r0.z, r0.x, l(1.000000)
  else
    mov r0.x, l(1.000000)
  endif
else
  mov r0.x, l(1.000000)
endif
add r0.y, -r0.x, r0.y
mad o0.x, r0.w, r0.y, r0.x
mov o0.y, r1.w
mov o0.z, r0.w
mov o0.w, l(1.000000)
ret
// Approximately 0 instruction slots used

//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
