// BCC main lighting
Texture2D<float4> t2 : register(t2);

Texture2D<float4> t1 : register(t1);

SamplerState s0_s : register(s0);

cbuffer cb1 : register(b1)
{
  float4 cb1[8];
}

cbuffer cb0 : register(b0)
{
  float4 cb0[2];
}


// 3Dmigoto declarations
#define cmp -
Texture1D<float4> IniParams : register(t120);
Texture2D<float4> StereoParams : register(t125);


void main(
  float4 v0 : SV_POSITION0,
  float4 v1 : TEXCOORD0,
  float3 v2 : TEXCOORD1,
  out float4 o0 : SV_TARGET0)
{
  float4 r0,r1,r2;
  uint4 bitmask, uiDest;
  float4 fDest;
  float4 stereo = StereoParams.Load(0);
  float4 iniParams = IniParams.Load(0);

  r0.x = t2.SampleLevel(s0_s, v1.xy, 0).x;
  r0.x = cb1[3].x * r0.x;
  r0.xyz = -v2.xyz * r0.xxx + cb1[6].xyz;
  
  r0.x+=stereo.x * (r0.z - stereo.y) * cb0[1].z;
  
  r0.w = dot(r0.xyz, r0.xyz);
  r1.x = rsqrt(r0.w);
  r1.y = r1.x * r0.w;
  r1.y = 0.699999988 * r1.y;
  r0.w = r0.w * 0.0299999993 + r1.y;
  r0.w = 1 / r0.w;
  r1.yzw = cb1[4].xyz * r0.www;
  r2.xyzw = t1.SampleLevel(s0_s, v1.xy, 0).xyzw;
  r2.xyz = r2.xyz * float3(2,2,2) + float3(-1,-1,-1);
  r0.x = dot(r0.xyz, r2.xyz);
  r0.x = r0.x * r1.x;
  r0.x = max(0, r0.x);
  r0.xyz = r1.yzw * r0.xxx;
  r1.xyz = r0.xyz * r2.www;
  r0.w = cmp(0 != cb1[7].w);
  o0.xyz = r0.www ? r1.xyz : r0.xyz;
  o0.w = 1;
  return;
}

/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
//
// Generated by Microsoft (R) D3D Shader Disassembler
//
//   using 3Dmigoto v1.3.16 on Tue Jun  1 23:01:34 2021
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyzw        0      POS   float
// TEXCOORD                 0   xy          1     NONE   float   xy
// TEXCOORD                 1   xyz         2     NONE   float   xyz
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_TARGET                0   xyzw        0   TARGET   float   xyzw
//
ps_5_0
dcl_globalFlags refactoringAllowed
dcl_constantbuffer CB1[8], immediateIndexed
dcl_sampler s0, mode_default
dcl_resource_texture2d (float,float,float,float) t1
dcl_resource_texture2d (float,float,float,float) t2
dcl_input_ps linear v1.xy
dcl_input_ps linear v2.xyz
dcl_output o0.xyzw
dcl_temps 3
sample_l_indexable(texture2d)(float,float,float,float) r0.x, v1.xyxx, t2.xyzw, s0, l(0.000000)
mul r0.x, r0.x, cb1[3].x
mad r0.xyz, -v2.xyzx, r0.xxxx, cb1[6].xyzx
dp3 r0.w, r0.xyzx, r0.xyzx
rsq r1.x, r0.w
mul r1.y, r0.w, r1.x
mul r1.y, r1.y, l(0.700000)
mad r0.w, r0.w, l(0.030000), r1.y
div r0.w, l(1.000000, 1.000000, 1.000000, 1.000000), r0.w
mul r1.yzw, r0.wwww, cb1[4].xxyz
sample_l_indexable(texture2d)(float,float,float,float) r2.xyzw, v1.xyxx, t1.xyzw, s0, l(0.000000)
mad r2.xyz, r2.xyzx, l(2.000000, 2.000000, 2.000000, 0.000000), l(-1.000000, -1.000000, -1.000000, 0.000000)
dp3 r0.x, r0.xyzx, r2.xyzx
mul r0.x, r1.x, r0.x
max r0.x, r0.x, l(0.000000)
mul r0.xyz, r0.xxxx, r1.yzwy
mul r1.xyz, r2.wwww, r0.xyzx
ne r0.w, l(0.000000, 0.000000, 0.000000, 0.000000), cb1[7].w
movc o0.xyz, r0.wwww, r1.xyzx, r0.xyzx
mov o0.w, l(1.000000)
ret
// Approximately 0 instruction slots used

//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
