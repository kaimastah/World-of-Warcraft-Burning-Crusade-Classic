// lighting 5
Texture2D<float4> t2 : register(t2);

Texture2D<float4> t1 : register(t1);

SamplerState s0_s : register(s0);

cbuffer cb1 : register(b1)
{
  float4 cb1[32];
}

cbuffer cb0 : register(b0)
{
  float4 cb0[2];
}


// 3Dmigoto declarations
#define cmp -
Texture1D<float4> IniParams : register(t120);
Texture2D<float4> StereoParams : register(t125);


void main(
  float4 v0 : SV_POSITION0,
  float4 v1 : TEXCOORD0,
  float3 v2 : TEXCOORD1,
  out float4 o0 : SV_TARGET0)
{
  float4 r0,r1,r2,r3,r4;
  uint4 bitmask, uiDest;
  float4 fDest;
  
  float4 stereo = StereoParams.Load(0);
  float4 iniParams = IniParams.Load(0);

  r0.x = t2.SampleLevel(s0_s, v1.xy, 0).x;
  r1.xyzw = t1.SampleLevel(s0_s, v1.xy, 0).xyzw;
  r0.yzw = r1.xyz * float3(2,2,2) + float3(-1,-1,-1);
  r0.x = cb1[3].x * r0.x;
  r1.xyz = float3(0,0,0);
  r2.x = 0;
  while (true) {
    r2.y = cmp((int)r2.x >= 4);
    if (r2.y != 0) break;
    r2.y = (uint)r2.x << 3;
    r3.xyz = -v2.xyz * r0.xxx + cb1[r2.y+6].xyz;
	
	r3.x+=stereo.x * (r3.z - stereo.y) * cb0[1].z;
	
    r2.z = dot(r3.xyz, r3.xyz);
    r2.w = rsqrt(r2.z);
    r3.w = r2.z * r2.w;
    r3.x = dot(r3.xyz, r0.yzw);
    r2.w = r3.x * r2.w;
    r2.w = max(0, r2.w);
    r3.x = 0.699999988 * r3.w;
    r2.z = r2.z * 0.0299999993 + r3.x;
    r2.z = 1 / r2.z;
    r3.xyz = cb1[r2.y+4].xyz * r2.zzz;
    r3.xyz = r3.xyz * r2.www;
    r2.y = cmp(0 != cb1[r2.y+7].w);
    r4.xyz = r3.xyz * r1.www;
    r2.yzw = r2.yyy ? r4.xyz : r3.xyz;
    r1.xyz = r2.yzw + r1.xyz;
    r2.x = (int)r2.x + 1;
  }
  o0.xyz = r1.xyz;
  o0.w = 1;
  return;
}

/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
//
// Generated by Microsoft (R) D3D Shader Disassembler
//
//   using 3Dmigoto v1.3.16 on Wed Jun  2 02:04:46 2021
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyzw        0      POS   float
// TEXCOORD                 0   xy          1     NONE   float   xy
// TEXCOORD                 1   xyz         2     NONE   float   xyz
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_TARGET                0   xyzw        0   TARGET   float   xyzw
//
ps_5_0
dcl_globalFlags refactoringAllowed
dcl_constantbuffer CB1[32], dynamicIndexed
dcl_sampler s0, mode_default
dcl_resource_texture2d (float,float,float,float) t1
dcl_resource_texture2d (float,float,float,float) t2
dcl_input_ps linear v1.xy
dcl_input_ps linear v2.xyz
dcl_output o0.xyzw
dcl_temps 5
sample_l_indexable(texture2d)(float,float,float,float) r0.x, v1.xyxx, t2.xyzw, s0, l(0.000000)
sample_l_indexable(texture2d)(float,float,float,float) r1.xyzw, v1.xyxx, t1.xyzw, s0, l(0.000000)
mad r0.yzw, r1.xxyz, l(0.000000, 2.000000, 2.000000, 2.000000), l(0.000000, -1.000000, -1.000000, -1.000000)
mul r0.x, r0.x, cb1[3].x
mov r1.xyz, l(0,0,0,0)
mov r2.x, l(0)
loop
  ige r2.y, r2.x, l(4)
  breakc_nz r2.y
  ishl r2.y, r2.x, l(3)
  mad r3.xyz, -v2.xyzx, r0.xxxx, cb1[r2.y + 6].xyzx
  dp3 r2.z, r3.xyzx, r3.xyzx
  rsq r2.w, r2.z
  mul r3.w, r2.w, r2.z
  dp3 r3.x, r3.xyzx, r0.yzwy
  mul r2.w, r2.w, r3.x
  max r2.w, r2.w, l(0.000000)
  mul r3.x, r3.w, l(0.700000)
  mad r2.z, r2.z, l(0.030000), r3.x
  div r2.z, l(1.000000, 1.000000, 1.000000, 1.000000), r2.z
  mul r3.xyz, r2.zzzz, cb1[r2.y + 4].xyzx
  mul r3.xyz, r2.wwww, r3.xyzx
  ne r2.y, l(0.000000, 0.000000, 0.000000, 0.000000), cb1[r2.y + 7].w
  mul r4.xyz, r1.wwww, r3.xyzx
  movc r2.yzw, r2.yyyy, r4.xxyz, r3.xxyz
  add r1.xyz, r1.xyzx, r2.yzwy
  iadd r2.x, r2.x, l(1)
endloop
mov o0.xyz, r1.xyzx
mov o0.w, l(1.000000)
ret
// Approximately 0 instruction slots used

//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
