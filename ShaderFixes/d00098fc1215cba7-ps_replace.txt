// Shadows Ultra High
Texture2D<float4> t9 : register(t9);

Texture2D<float4> t8 : register(t8);

Texture2D<float4> t7 : register(t7);

Texture2D<float4> t6 : register(t6);

Texture2D<float4> t5 : register(t5);

Texture2D<float4> t2 : register(t2);

Texture2D<float4> t1 : register(t1);

Texture2D<float4> t0 : register(t0);

SamplerComparisonState s6_s : register(s6);

SamplerComparisonState s5_s : register(s5);

SamplerState s2_s : register(s2);

SamplerState s1_s : register(s1);

SamplerState s0_s : register(s0);

cbuffer cb1 : register(b1)
{
  float4 cb1[30];
}

cbuffer cb13 : register(b13)
{
  float4 cb13[1];
}




// 3Dmigoto declarations
#define cmp -
Texture1D<float4> IniParams : register(t120);
Texture2D<float4> StereoParams : register(t125);


void main(
  float4 v0 : SV_POSITION0,
  float4 v1 : TEXCOORD0,
  float4 v2 : TEXCOORD1,
  out float4 o0 : SV_TARGET0)
{
  float4 r0,r1,r2,r3,r4,r5;
  uint4 bitmask, uiDest;
  float4 fDest;
  
  float4 stereo = StereoParams.Load(0);
  float4 iniParams = IniParams.Load(0);

  r0.xyzw = t0.Sample(s0_s, v1.xy).xyzw;
  r1.z = t1.Sample(s1_s, v1.xy).x;
  r1.w = t2.Sample(s2_s, v1.xy).x;
  r0.xyz = r0.xyz * float3(2,2,2) + float3(-1,-1,-1);
  r2.x = cmp(0.000000 == cb1[12].z);
  r2.yzw = v2.xyz * r1.zzz;
  r2.yzw = cb1[12].yyy * r2.yzw;

  r2.y-=stereo.x * (r2.w - stereo.y) / cb13[0].x;
  
  r1.xy = v2.xy;
  r1.xyz = r2.xxx ? r2.yzw : r1.xyz;
  r2.x = dot(cb1[13].xyz, r0.xyz);
  r2.x = 1 + -abs(r2.x);
  r2.x = max(0, r2.x);
  r2.x = r1.z * 0.0120000001 + r2.x;
  r0.xyz = r2.xxx * r0.xyz;
  r2.xyz = r0.xyz * float3(0.100000001,0.100000001,0.100000001) + r1.xyz;
  r2.w = 1;
  r3.x = dot(r2.xyzw, cb1[0].xyzw);
  r3.y = dot(r2.xyzw, cb1[1].xyzw);
  r2.x = dot(r2.xyzw, cb1[2].xyzw);
  r2.y = cmp(0 < r0.w);
  if (r2.y != 0) {
    r2.y = max(abs(r3.x), abs(r3.y));
    r2.y = cmp(r2.y < 1);
    if (r2.y != 0) {
      r4.xyzw = r3.xyxy * float4(0.5,0.5,0.5,0.5) + float4(0.5,0.5,0.5,0.5);
      r2.yz = float2(0,0);
      while (true) {
        r2.w = cmp((int)r2.z >= 16);
        if (r2.w != 0) break;
        r5.xyzw = cb1[r2.z+14].xyzw + r4.xyzw;
        r2.w = t6.SampleCmpLevelZero(s6_s, r5.xy, r2.x).x;
        r2.w = r2.y + r2.w;
        r3.z = t6.SampleCmpLevelZero(s6_s, r5.zw, r2.x).x;
        r2.y = r3.z + r2.w;
        r2.z = (int)r2.z + 1;
      }
      r2.y = 0.03125 * r2.y;
    } else {
      r4.xyz = r0.xyz * float3(0.133300006,0.133300006,0.133300006) + r1.xyz;
      r4.w = 1;
      r5.x = dot(r4.xyzw, cb1[3].xyzw);
      r5.y = dot(r4.xyzw, cb1[4].xyzw);
      r2.z = max(abs(r5.x), abs(r5.y));
      r2.z = cmp(r2.z < 1);
      if (r2.z != 0) {
        r2.z = dot(r4.xyzw, cb1[5].xyzw);
        r4.xyzw = r5.xyxy * float4(0.5,0.5,0.5,0.5) + float4(0.5,0.5,0.5,0.5);
        r2.w = 0;
        r3.z = 0;
        while (true) {
          r3.w = cmp((int)r3.z >= 16);
          if (r3.w != 0) break;
          r5.xyzw = cb1[r3.z+14].xyzw * float4(0.5,0.5,0.5,0.5) + r4.xyzw;
          r3.w = t7.SampleCmpLevelZero(s6_s, r5.xy, r2.z).x;
          r3.w = r3.w + r2.w;
          r5.x = t7.SampleCmpLevelZero(s6_s, r5.zw, r2.z).x;
          r2.w = r5.x + r3.w;
          r3.z = (int)r3.z + 1;
        }
        r2.y = 0.03125 * r2.w;
      } else {
        r4.xyz = r0.xyz * float3(0.155499995,0.155499995,0.155499995) + r1.xyz;
        r4.w = 1;
        r5.x = dot(r4.xyzw, cb1[6].xyzw);
        r5.y = dot(r4.xyzw, cb1[7].xyzw);
        r2.z = max(abs(r5.x), abs(r5.y));
        r2.z = cmp(r2.z < 1);
        if (r2.z != 0) {
          r2.z = dot(r4.xyzw, cb1[8].xyzw);
          r4.xyzw = r5.xyxy * float4(0.5,0.5,0.5,0.5) + float4(0.5,0.5,0.5,0.5);
          r2.w = 0;
          r3.z = 0;
          while (true) {
            r3.w = cmp((int)r3.z >= 16);
            if (r3.w != 0) break;
            r5.xyzw = cb1[r3.z+14].xyzw * float4(0.333333343,0.333333343,0.333333343,0.333333343) + r4.xyzw;
            r3.w = t8.SampleCmpLevelZero(s6_s, r5.xy, r2.z).x;
            r3.w = r3.w + r2.w;
            r5.x = t8.SampleCmpLevelZero(s6_s, r5.zw, r2.z).x;
            r2.w = r5.x + r3.w;
            r3.z = (int)r3.z + 1;
          }
          r2.y = 0.03125 * r2.w;
        } else {
          r4.xyz = r0.xyz * float3(0.199900001,0.199900001,0.199900001) + r1.xyz;
          r4.w = 1;
          r0.x = dot(r4.xyzw, cb1[9].xyzw);
          r0.y = dot(r4.xyzw, cb1[10].xyzw);
          r0.z = max(abs(r0.x), abs(r0.y));
          r1.x = cmp(r0.z < 1);
          if (r1.x != 0) {
            r1.x = dot(r4.xyzw, cb1[11].xyzw);
            r0.z = saturate(r0.z * -3.4482758 + 3.41379309);
            r4.xyzw = r0.xyxy * float4(0.5,0.5,0.5,0.5) + float4(0.5,0.5,0.5,0.5);
            r0.xy = float2(0,0);
            while (true) {
              r1.y = cmp((int)r0.y >= 16);
              if (r1.y != 0) break;
              r5.xyzw = cb1[r0.y+14].xyzw * float4(0.25,0.25,0.25,0.25) + r4.xyzw;
              r1.y = t9.SampleCmpLevelZero(s6_s, r5.xy, r1.x).x;
              r1.y = r1.y + r0.x;
              r1.z = t9.SampleCmpLevelZero(s6_s, r5.zw, r1.x).x;
              r0.x = r1.y + r1.z;
              r0.y = (int)r0.y + 1;
            }
            r0.x = r0.x * 0.03125 + -1;
            r2.y = r0.z * r0.x + 1;
          } else {
            r2.y = 1;
          }
        }
      }
    }
  } else {
    r2.y = 1;
  }
  r0.x = cmp(r0.w < 1);
  if (r0.x != 0) {
    r0.x = max(abs(r3.x), abs(r3.y));
    r0.y = cmp(r0.x < 1);
    if (r0.y != 0) {
      r0.x = saturate(r0.x * -3.4482758 + 3.41379309);
      r3.xyzw = r3.xyxy * float4(0.5,0.5,0.5,0.5) + float4(0.5,0.5,0.5,0.5);
      r0.yz = float2(0,0);
      while (true) {
        r1.x = cmp((int)r0.z >= 16);
        if (r1.x != 0) break;
        r4.xyzw = cb1[r0.z+14].xyzw + r3.xyzw;
        r1.x = t5.SampleCmpLevelZero(s5_s, r4.xy, r2.x).x;
        r1.x = r1.x + r0.y;
        r1.y = t5.SampleCmpLevelZero(s5_s, r4.zw, r2.x).x;
        r0.y = r1.x + r1.y;
        r0.z = (int)r0.z + 1;
      }
      r0.y = r0.y * 0.03125 + -1;
      r0.x = r0.x * r0.y + 1;
    } else {
      r0.x = 1;
    }
  } else {
    r0.x = 1;
  }
  r0.y = r2.y + -r0.x;
  o0.x = r0.w * r0.y + r0.x;
  o0.y = r1.w;
  o0.z = r0.w;
  o0.w = 1;
  return;
}

/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
//
// Generated by Microsoft (R) D3D Shader Disassembler
//
//   using 3Dmigoto v1.3.16 on Tue Jun  1 19:49:38 2021
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyzw        0      POS   float
// TEXCOORD                 0   xy          1     NONE   float   xy
// TEXCOORD                 1   xyzw        2     NONE   float   xyz
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_TARGET                0   xyzw        0   TARGET   float   xyzw
//
ps_5_0
dcl_globalFlags refactoringAllowed
dcl_constantbuffer CB1[30], dynamicIndexed
dcl_sampler s0, mode_default
dcl_sampler s1, mode_default
dcl_sampler s2, mode_default
dcl_sampler s5, mode_comparison
dcl_sampler s6, mode_comparison
dcl_resource_texture2d (float,float,float,float) t0
dcl_resource_texture2d (float,float,float,float) t1
dcl_resource_texture2d (float,float,float,float) t2
dcl_resource_texture2d (float,float,float,float) t5
dcl_resource_texture2d (float,float,float,float) t6
dcl_resource_texture2d (float,float,float,float) t7
dcl_resource_texture2d (float,float,float,float) t8
dcl_resource_texture2d (float,float,float,float) t9
dcl_input_ps linear v1.xy
dcl_input_ps linear v2.xyz
dcl_output o0.xyzw
dcl_temps 6
sample_indexable(texture2d)(float,float,float,float) r0.xyzw, v1.xyxx, t0.xyzw, s0
sample_indexable(texture2d)(float,float,float,float) r1.z, v1.xyxx, t1.yzxw, s1
sample_indexable(texture2d)(float,float,float,float) r1.w, v1.xyxx, t2.yzwx, s2
mad r0.xyz, r0.xyzx, l(2.000000, 2.000000, 2.000000, 0.000000), l(-1.000000, -1.000000, -1.000000, 0.000000)
eq r2.x, l(0.000000), cb1[12].z
mul r2.yzw, r1.zzzz, v2.xxyz
mul r2.yzw, r2.yyzw, cb1[12].yyyy
mov r1.xy, v2.xyxx
movc r1.xyz, r2.xxxx, r2.yzwy, r1.xyzx
dp3 r2.x, cb1[13].xyzx, r0.xyzx
add r2.x, -|r2.x|, l(1.000000)
max r2.x, r2.x, l(0.000000)
mad r2.x, r1.z, l(0.012000), r2.x
mul r0.xyz, r0.xyzx, r2.xxxx
mad r2.xyz, r0.xyzx, l(0.100000, 0.100000, 0.100000, 0.000000), r1.xyzx
mov r2.w, l(1.000000)
dp4 r3.x, r2.xyzw, cb1[0].xyzw
dp4 r3.y, r2.xyzw, cb1[1].xyzw
dp4 r2.x, r2.xyzw, cb1[2].xyzw
lt r2.y, l(0.000000), r0.w
if_nz r2.y
  max r2.y, |r3.y|, |r3.x|
  lt r2.y, r2.y, l(1.000000)
  if_nz r2.y
    mad r4.xyzw, r3.xyxy, l(0.500000, 0.500000, 0.500000, 0.500000), l(0.500000, 0.500000, 0.500000, 0.500000)
    mov r2.yz, l(0,0,0,0)
    loop
      ige r2.w, r2.z, l(16)
      breakc_nz r2.w
      add r5.xyzw, r4.xyzw, cb1[r2.z + 14].xyzw
      sample_c_lz_indexable(texture2d)(float,float,float,float) r2.w, r5.xyxx, t6.xxxx, s6, r2.x
      add r2.w, r2.w, r2.y
      sample_c_lz_indexable(texture2d)(float,float,float,float) r3.z, r5.zwzz, t6.xxxx, s6, r2.x
      add r2.y, r2.w, r3.z
      iadd r2.z, r2.z, l(1)
    endloop
    mul r2.y, r2.y, l(0.031250)
  else
    mad r4.xyz, r0.xyzx, l(0.133300, 0.133300, 0.133300, 0.000000), r1.xyzx
    mov r4.w, l(1.000000)
    dp4 r5.x, r4.xyzw, cb1[3].xyzw
    dp4 r5.y, r4.xyzw, cb1[4].xyzw
    max r2.z, |r5.y|, |r5.x|
    lt r2.z, r2.z, l(1.000000)
    if_nz r2.z
      dp4 r2.z, r4.xyzw, cb1[5].xyzw
      mad r4.xyzw, r5.xyxy, l(0.500000, 0.500000, 0.500000, 0.500000), l(0.500000, 0.500000, 0.500000, 0.500000)
      mov r2.w, l(0)
      mov r3.z, l(0)
      loop
        ige r3.w, r3.z, l(16)
        breakc_nz r3.w
        mad r5.xyzw, cb1[r3.z + 14].xyzw, l(0.500000, 0.500000, 0.500000, 0.500000), r4.xyzw
        sample_c_lz_indexable(texture2d)(float,float,float,float) r3.w, r5.xyxx, t7.xxxx, s6, r2.z
        add r3.w, r2.w, r3.w
        sample_c_lz_indexable(texture2d)(float,float,float,float) r5.x, r5.zwzz, t7.xxxx, s6, r2.z
        add r2.w, r3.w, r5.x
        iadd r3.z, r3.z, l(1)
      endloop
      mul r2.y, r2.w, l(0.031250)
    else
      mad r4.xyz, r0.xyzx, l(0.155500, 0.155500, 0.155500, 0.000000), r1.xyzx
      mov r4.w, l(1.000000)
      dp4 r5.x, r4.xyzw, cb1[6].xyzw
      dp4 r5.y, r4.xyzw, cb1[7].xyzw
      max r2.z, |r5.y|, |r5.x|
      lt r2.z, r2.z, l(1.000000)
      if_nz r2.z
        dp4 r2.z, r4.xyzw, cb1[8].xyzw
        mad r4.xyzw, r5.xyxy, l(0.500000, 0.500000, 0.500000, 0.500000), l(0.500000, 0.500000, 0.500000, 0.500000)
        mov r2.w, l(0)
        mov r3.z, l(0)
        loop
          ige r3.w, r3.z, l(16)
          breakc_nz r3.w
          mad r5.xyzw, cb1[r3.z + 14].xyzw, l(0.333333343, 0.333333343, 0.333333343, 0.333333343), r4.xyzw
          sample_c_lz_indexable(texture2d)(float,float,float,float) r3.w, r5.xyxx, t8.xxxx, s6, r2.z
          add r3.w, r2.w, r3.w
          sample_c_lz_indexable(texture2d)(float,float,float,float) r5.x, r5.zwzz, t8.xxxx, s6, r2.z
          add r2.w, r3.w, r5.x
          iadd r3.z, r3.z, l(1)
        endloop
        mul r2.y, r2.w, l(0.031250)
      else
        mad r4.xyz, r0.xyzx, l(0.199900, 0.199900, 0.199900, 0.000000), r1.xyzx
        mov r4.w, l(1.000000)
        dp4 r0.x, r4.xyzw, cb1[9].xyzw
        dp4 r0.y, r4.xyzw, cb1[10].xyzw
        max r0.z, |r0.y|, |r0.x|
        lt r1.x, r0.z, l(1.000000)
        if_nz r1.x
          dp4 r1.x, r4.xyzw, cb1[11].xyzw
          mad_sat r0.z, r0.z, l(-3.44827580), l(3.413793)
          mad r4.xyzw, r0.xyxy, l(0.500000, 0.500000, 0.500000, 0.500000), l(0.500000, 0.500000, 0.500000, 0.500000)
          mov r0.xy, l(0,0,0,0)
          loop
            ige r1.y, r0.y, l(16)
            breakc_nz r1.y
            mad r5.xyzw, cb1[r0.y + 14].xyzw, l(0.250000, 0.250000, 0.250000, 0.250000), r4.xyzw
            sample_c_lz_indexable(texture2d)(float,float,float,float) r1.y, r5.xyxx, t9.xxxx, s6, r1.x
            add r1.y, r0.x, r1.y
            sample_c_lz_indexable(texture2d)(float,float,float,float) r1.z, r5.zwzz, t9.xxxx, s6, r1.x
            add r0.x, r1.z, r1.y
            iadd r0.y, r0.y, l(1)
          endloop
          mad r0.x, r0.x, l(0.031250), l(-1.000000)
          mad r2.y, r0.z, r0.x, l(1.000000)
        else
          mov r2.y, l(1.000000)
        endif
      endif
    endif
  endif
else
  mov r2.y, l(1.000000)
endif
lt r0.x, r0.w, l(1.000000)
if_nz r0.x
  max r0.x, |r3.y|, |r3.x|
  lt r0.y, r0.x, l(1.000000)
  if_nz r0.y
    mad_sat r0.x, r0.x, l(-3.44827580), l(3.413793)
    mad r3.xyzw, r3.xyxy, l(0.500000, 0.500000, 0.500000, 0.500000), l(0.500000, 0.500000, 0.500000, 0.500000)
    mov r0.yz, l(0,0,0,0)
    loop
      ige r1.x, r0.z, l(16)
      breakc_nz r1.x
      add r4.xyzw, r3.xyzw, cb1[r0.z + 14].xyzw
      sample_c_lz_indexable(texture2d)(float,float,float,float) r1.x, r4.xyxx, t5.xxxx, s5, r2.x
      add r1.x, r0.y, r1.x
      sample_c_lz_indexable(texture2d)(float,float,float,float) r1.y, r4.zwzz, t5.xxxx, s5, r2.x
      add r0.y, r1.y, r1.x
      iadd r0.z, r0.z, l(1)
    endloop
    mad r0.y, r0.y, l(0.031250), l(-1.000000)
    mad r0.x, r0.x, r0.y, l(1.000000)
  else
    mov r0.x, l(1.000000)
  endif
else
  mov r0.x, l(1.000000)
endif
add r0.y, -r0.x, r2.y
mad o0.x, r0.w, r0.y, r0.x
mov o0.y, r1.w
mov o0.z, r0.w
mov o0.w, l(1.000000)
ret
// Approximately 0 instruction slots used

//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
