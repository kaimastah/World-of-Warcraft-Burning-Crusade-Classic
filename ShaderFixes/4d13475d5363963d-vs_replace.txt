// character panel 13
cbuffer cb1 : register(b1)
{
  float4 cb1[209];
}

cbuffer cb0 : register(b0)
{
  float4 cb0[13];
}




// 3Dmigoto declarations
#define cmp -
Texture1D<float4> IniParams : register(t120);
Texture2D<float4> StereoParams : register(t125);


void main(
  uint v0 : TEXCOORD0,
  out float4 o0 : SV_POSITION0,
  out float4 o1 : COLOR0,
  out float2 o2 : TEXCOORD0)
{
  float4 r0,r1,r2,r3,r4;
  uint4 bitmask, uiDest;
  float4 fDest;

  float4 stereo = StereoParams.Load(0);
  float4 iniParams = IniParams.Load(0);
  float4 iniParams10 = IniParams.Load(int2(10,0));

  r0.xyz = (uint3)cb1[0].yxz;
  r0.w = (int)v0.x & 1;
  r1.x = (int)-r0.w + (int)v0.x;
  r1.x = (uint)r1.x >> 1;
  r1.y = (uint)r0.w;
  r1.z = cmp(1 < (uint)r0.z);
  uiDest.x = (uint)r1.x / (uint)r0.y;
  r3.x = (uint)r1.x % (uint)r0.y;
  r2.x = uiDest.x;
  r1.w = (int)r2.x & 1;
  r0.y = (int)r0.y + -1;
  r2.y = (uint)r3.x << 1;
  r0.y = (int)r0.y + (int)-r2.y;
  r3.x = mad((int)r0.y, (int)r1.w, (int)r3.x);
  r2.yz = (uint2)r0.zx;
  r0.y = 1 / r2.y;
  r0.w = (int)r0.w + (int)r2.x;
  r0.w = (uint)r0.w;
  r3.y = r0.w * r0.y;
  r1.xw = r1.zz ? r3.xy : r1.xy;
  uiDest.x = (uint)r1.x / (uint)r0.x;
  r2.x = (uint)r1.x % (uint)r0.x;
  r0.x = uiDest.x;
  r0.y = (int)r0.x + 1;
  r0.w = (uint)r2.x;
  r0.w = r0.w / r2.z;
  r0.w = saturate(cb1[r0.x+185].w * r0.w);
  r2.xyz = cb1[r0.y+185].xyz + -cb1[r0.x+185].xyz;
  r1.xyz = r0.www * r2.xyz + cb1[r0.x+185].xyz;
  r0.y = r1.y / cb1[0].w;
  r1.y = r0.w * r0.w;
  r2.x = r1.y * r0.w;
  r0.z = cmp((int)r0.z == 1);
  if (r0.z != 0) {
    bitmask.z = ((~(-1 << 1)) << 2) & 0xffffffff;  r0.z = (((uint)v0.x << 2) & bitmask.z) | ((uint)0 & ~bitmask.z);
    bitmask.z = ((~(-1 << 29)) << 3) & 0xffffffff;  r0.z = (((uint)r0.x << 3) & bitmask.z) | ((uint)r0.z & ~bitmask.z);
    r2.yzw = r0.www * cb1[r0.z+2].xyz + cb1[r0.z+1].xyz;
    r2.yzw = r1.yyy * cb1[r0.z+3].xyz + r2.yzw;
    r2.yzw = r2.xxx * cb1[r0.z+4].xyz + r2.yzw;
  } else {
    r0.x = (uint)r0.x << 3;
    r3.xyz = r0.www * cb1[r0.x+2].xyz + cb1[r0.x+1].xyz;
    r3.xyz = r1.yyy * cb1[r0.x+3].xyz + r3.xyz;
    r3.xyz = r2.xxx * cb1[r0.x+4].xyz + r3.xyz;
    r4.xyz = r0.www * cb1[r0.x+6].xyz + cb1[r0.x+5].xyz;
    r4.xyz = r1.yyy * cb1[r0.x+7].xyz + r4.xyz;
    r0.xzw = r2.xxx * cb1[r0.x+8].xyz + r4.xyz;
    r0.xzw = r0.xzw + -r3.xyz;
    r2.yzw = r1.www * r0.xzw + r3.xyz;
  }
  r0.x = r2.w + r1.z;
  r3.xyzw = -cb0[12].xyzw + cb0[11].xyzw;
  o1.xyzw = r0.yyyy * r3.xyzw + cb0[12].xyzw;
  r3.xyzw = cb0[5].xyzw * r2.zzzz;
  r2.xyzw = r2.yyyy * cb0[4].xyzw + r3.xyzw;
  r0.xyzw = r0.xxxx * cb0[6].xyzw + r2.xyzw;
  o0.xyzw = cb0[7].xyzw + r0.xyzw;
  o2.xy = r1.xw * cb0[8].xy + cb0[8].zw;

  if (iniParams.x != 0 && iniParams10.x == 10 && iniParams10.y == 100)
  {
  o0.x-=stereo.x * (o0.w - stereo.y);
  o0.x+=stereo.x * o0.w * (1 - stereo.y * iniParams.x);
  }

  else if (iniParams10.x == 10 && iniParams10.y == 100)
  o0.x-=stereo.x * (o0.w - stereo.y);

  return;
}

/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
//
// Generated by Microsoft (R) D3D Shader Disassembler
//
//   using 3Dmigoto v1.3.16 on Fri Jun 25 19:41:32 2021
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// TEXCOORD                 0   x           0     NONE    uint   x
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyzw        0      POS   float   xyzw
// COLOR                    0   xyzw        1     NONE   float   xyzw
// TEXCOORD                 0   xy          2     NONE   float   xy
//
vs_5_0
dcl_globalFlags refactoringAllowed
dcl_constantbuffer CB0[13], immediateIndexed
dcl_constantbuffer CB1[209], dynamicIndexed
dcl_input v0.x
dcl_output_siv o0.xyzw, position
dcl_output o1.xyzw
dcl_output o2.xy
dcl_temps 5
ftou r0.xyz, cb1[0].yxzy
and r0.w, v0.x, l(1)
iadd r1.x, -r0.w, v0.x
ushr r1.x, r1.x, l(1)
utof r1.y, r0.w
ult r1.z, l(1), r0.z
udiv r2.x, r3.x, r1.x, r0.y
and r1.w, r2.x, l(1)
iadd r0.y, r0.y, l(-1)
ishl r2.y, r3.x, l(1)
iadd r0.y, r0.y, -r2.y
imad r3.x, r0.y, r1.w, r3.x
utof r2.yz, r0.zzxz
div r0.y, l(1.000000, 1.000000, 1.000000, 1.000000), r2.y
iadd r0.w, r0.w, r2.x
utof r0.w, r0.w
mul r3.y, r0.y, r0.w
movc r1.xw, r1.zzzz, r3.xxxy, r1.xxxy
udiv r0.x, r2.x, r1.x, r0.x
iadd r0.y, r0.x, l(1)
utof r0.w, r2.x
div r0.w, r0.w, r2.z
mul_sat r0.w, r0.w, cb1[r0.x + 185].w
add r2.xyz, -cb1[r0.x + 185].xyzx, cb1[r0.y + 185].xyzx
mad r1.xyz, r0.wwww, r2.xyzx, cb1[r0.x + 185].xyzx
div r0.y, r1.y, cb1[0].w
mul r1.y, r0.w, r0.w
mul r2.x, r0.w, r1.y
ieq r0.z, r0.z, l(1)
if_nz r0.z
  bfi r0.z, l(1), l(2), v0.x, l(0)
  bfi r0.z, l(29), l(3), r0.x, r0.z
  mad r2.yzw, r0.wwww, cb1[r0.z + 2].xxyz, cb1[r0.z + 1].xxyz
  mad r2.yzw, r1.yyyy, cb1[r0.z + 3].xxyz, r2.yyzw
  mad r2.yzw, r2.xxxx, cb1[r0.z + 4].xxyz, r2.yyzw
else
  ishl r0.x, r0.x, l(3)
  mad r3.xyz, r0.wwww, cb1[r0.x + 2].xyzx, cb1[r0.x + 1].xyzx
  mad r3.xyz, r1.yyyy, cb1[r0.x + 3].xyzx, r3.xyzx
  mad r3.xyz, r2.xxxx, cb1[r0.x + 4].xyzx, r3.xyzx
  mad r4.xyz, r0.wwww, cb1[r0.x + 6].xyzx, cb1[r0.x + 5].xyzx
  mad r4.xyz, r1.yyyy, cb1[r0.x + 7].xyzx, r4.xyzx
  mad r0.xzw, r2.xxxx, cb1[r0.x + 8].xxyz, r4.xxyz
  add r0.xzw, -r3.xxyz, r0.xxzw
  mad r2.yzw, r1.wwww, r0.xxzw, r3.xxyz
endif
add r0.x, r1.z, r2.w
add r3.xyzw, cb0[11].xyzw, -cb0[12].xyzw
mad o1.xyzw, r0.yyyy, r3.xyzw, cb0[12].xyzw
mul r3.xyzw, r2.zzzz, cb0[5].xyzw
mad r2.xyzw, r2.yyyy, cb0[4].xyzw, r3.xyzw
mad r0.xyzw, r0.xxxx, cb0[6].xyzw, r2.xyzw
add o0.xyzw, r0.xyzw, cb0[7].xyzw
mad o2.xy, r1.xwxx, cb0[8].xyxx, cb0[8].zwzz
ret
// Approximately 0 instruction slots used

//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
