// stars & skybox outlands
cbuffer cb0 : register(b0)
{
  float4 cb0[17];
}

cbuffer cb4 : register(b4)
{
  float4 cb4[4];
}




// 3Dmigoto declarations
#define cmp -
Texture1D<float4> IniParams : register(t120);
Texture2D<float4> StereoParams : register(t125);


void main(
  float3 v0 : POSITION0,
  float3 v1 : NORMAL0,
  float2 v2 : TEXCOORD0,
  out float4 o0 : SV_POSITION0,
  out float4 o1 : COLOR0,
  out float4 o2 : TEXCOORD0,
  out float4 o3 : TEXCOORD1,
  out float2 o4 : TEXCOORD2)
{
  float4 r0,r1;
  uint4 bitmask, uiDest;
  float4 fDest;
  float4 stereo = StereoParams.Load(0);
  float4 iniParams = IniParams.Load(0);
  float4 iniParams1 = IniParams.Load(int2(1,0));
  float4 iniParams2 = IniParams.Load(int2(2,0));
  float4 iniParams10 = IniParams.Load(int2(10,0));

  r0.w = 1;
  r1.xyz = v0.xyz;
  r1.w = 1;
  r0.x = dot(cb0[14].xyzw, r1.xyzw);
  r0.y = dot(cb0[15].xyzw, r1.xyzw);
  r0.z = dot(cb0[16].xyzw, r1.xyzw);
  r1.x = dot(cb0[11].xyzw, r0.xyzw);
  r1.y = dot(cb0[12].xyzw, r0.xyzw);
  r1.z = dot(cb0[13].xyzw, r0.xyzw);
  r1.w = 1;
  o0.x = dot(cb4[0].xyzw, r1.xyzw);
  o0.y = dot(cb4[1].xyzw, r1.xyzw);
  o0.z = dot(cb4[2].xyzw, r1.xyzw);
  o0.w = dot(cb4[3].xyzw, r1.xyzw);
  o2.xyz = r1.xyz;
  r0.xyzw = saturate(cb0[7].xyzw + cb0[6].xyzw);
  o1.xyzw = float4(0.5,0.5,0.5,1) * r0.xyzw;
  o2.w = cb0[1].x;
  r0.x = dot(cb0[14].xyz, v1.xyz);
  r0.y = dot(cb0[15].xyz, v1.xyz);
  r0.z = dot(cb0[16].xyz, v1.xyz);
  r0.w = dot(r0.xyz, r0.xyz);
  r0.w = rsqrt(r0.w);
  r0.xyz = r0.xyz * r0.www;
  r1.x = dot(cb0[11].xyz, r0.xyz);
  r1.y = dot(cb0[12].xyz, r0.xyz);
  r1.z = dot(cb0[13].xyz, r0.xyz);
  r0.x = dot(r1.xyz, r1.xyz);
  r0.x = rsqrt(r0.x);
  o3.xyz = r1.xyz * r0.xxx;
  r0.xy = v2.xy;
  r0.z = 1;
  o4.x = dot(cb0[2].xyw, r0.xyz);
  o4.y = dot(cb0[3].xyw, r0.xyz);
  
  if (iniParams.x != 0 && iniParams10.x == 10 && iniParams10.y == 100 && iniParams1.x != 2)
  {
  o0.x-=stereo.x * (o0.w - stereo.y);
  o0.x+=stereo.x * o0.w * (1 - stereo.y * iniParams.x);
  }

  else if (iniParams10.x == 10 && iniParams10.y == 100 && iniParams1.x != 2)
  {
  o0.x-=stereo.x * (o0.w - stereo.y);
  }
  
  if (iniParams1.x == 2 && iniParams2.x == 2 && iniParams1.y != 2)
  {
  o0.x+=stereo.x * (o0.z + stereo.y);
  }

  else if (iniParams1.z == 2 && iniParams2.x == 2)
  {
  o0.x+=stereo.x * (o0.z + stereo.y);
  }

  return;
}

/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
//
// Generated by Microsoft (R) D3D Shader Disassembler
//
//   using 3Dmigoto v1.3.16 on Fri Aug 30 03:48:56 2019
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// POSITION                 0   xyz         0     NONE   float   xyz
// NORMAL                   0   xyz         1     NONE   float   xyz
// TEXCOORD                 0   xy          2     NONE   float   xy
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyzw        0      POS   float   xyzw
// COLOR                    0   xyzw        1     NONE   float   xyzw
// TEXCOORD                 0   xyzw        2     NONE   float   xyzw
// TEXCOORD                 1   xyz         3     NONE   float   xyz
// TEXCOORD                 2   xy          4     NONE   float   xy
//
vs_5_0
dcl_globalFlags refactoringAllowed
dcl_constantbuffer cb4[4], immediateIndexed
dcl_constantbuffer cb0[17], immediateIndexed
dcl_input v0.xyz
dcl_input v1.xyz
dcl_input v2.xy
dcl_output_siv o0.xyzw, position
dcl_output o1.xyzw
dcl_output o2.xyzw
dcl_output o3.xyz
dcl_output o4.xy
dcl_temps 2
mov [precise(w)] r0.w, l(1.000000)
mov [precise(xyz)] r1.xyz, v0.xyzx
mov [precise(w)] r1.w, l(1.000000)
dp4 [precise(x)] r0.x, cb0[14].xyzw, r1.xyzw
dp4 [precise(y)] r0.y, cb0[15].xyzw, r1.xyzw
dp4 [precise(z)] r0.z, cb0[16].xyzw, r1.xyzw
dp4 [precise(x)] r1.x, cb0[11].xyzw, r0.xyzw
dp4 [precise(y)] r1.y, cb0[12].xyzw, r0.xyzw
dp4 [precise(z)] r1.z, cb0[13].xyzw, r0.xyzw
mov [precise(w)] r1.w, l(1.000000)
dp4 [precise(x)] o0.x, cb4[0].xyzw, r1.xyzw
dp4 [precise(y)] o0.y, cb4[1].xyzw, r1.xyzw
dp4 [precise(z)] o0.z, cb4[2].xyzw, r1.xyzw
dp4 [precise(w)] o0.w, cb4[3].xyzw, r1.xyzw
mov [precise(xyz)] o2.xyz, r1.xyzx
add_sat r0.xyzw, cb0[6].xyzw, cb0[7].xyzw
mul o1.xyzw, r0.xyzw, l(0.500000, 0.500000, 0.500000, 1.000000)
mov o2.w, cb0[1].x
dp3 [precise(x)] r0.x, cb0[14].xyzx, v1.xyzx
dp3 [precise(y)] r0.y, cb0[15].xyzx, v1.xyzx
dp3 [precise(z)] r0.z, cb0[16].xyzx, v1.xyzx
dp3 [precise(w)] r0.w, r0.xyzx, r0.xyzx
rsq [precise(w)] r0.w, r0.w
mul [precise(xyz)] r0.xyz, r0.wwww, r0.xyzx
dp3 [precise(x)] r1.x, cb0[11].xyzx, r0.xyzx
dp3 [precise(y)] r1.y, cb0[12].xyzx, r0.xyzx
dp3 [precise(z)] r1.z, cb0[13].xyzx, r0.xyzx
dp3 [precise(x)] r0.x, r1.xyzx, r1.xyzx
rsq [precise(x)] r0.x, r0.x
mul [precise(xyz)] o3.xyz, r0.xxxx, r1.xyzx
mov r0.xy, v2.xyxx
mov r0.z, l(1.000000)
dp3 o4.x, cb0[2].xywx, r0.xyzx
dp3 o4.y, cb0[3].xywx, r0.xyzx
ret
// Approximately 0 instruction slots used

//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
