// character panel 6
// cbuffer cb3 : register(b3)
// {
//   float4 cb3[12];
// }

// cbuffer cb0 : register(b0)
// {
//   float4 cb0[17];
// }

// cbuffer cb4 : register(b4)
// {
//   float4 cb4[4];
// }




// // 3Dmigoto declarations
// #define cmp -
// Texture1D<float4> IniParams : register(t120);
// Texture2D<float4> StereoParams : register(t125);


// void main(
//   float3 v0 : POSITION0,
//   float4 v1 : COLOR0,
//   float4 v2 : TEXCOORD0,
//   float2 v3 : TEXCOORD1,
//   out float4 o0 : SV_POSITION0,
//   out float4 o1 : COLOR0,
//   out float4 o2 : TEXCOORD0,
//   out float4 o3 : TEXCOORD1,
//   out float2 o4 : TEXCOORD2,
//   out float2 p4 : TEXCOORD3,
//   out float4 o5 : TEXCOORD6)
// {
//   float4 r0,r1,r2,r3;
//   uint4 bitmask, uiDest;
//   float4 fDest;

//   float4 stereo = StereoParams.Load(0);
//   float4 iniParams = IniParams.Load(0);
//   float4 iniParams10 = IniParams.Load(int2(10,0));

//   r0.xyz = v0.xyz;
//   r0.w = 1;
//   r1.x = dot(cb0[14].xyzw, r0.xyzw);
//   r1.y = dot(cb0[15].xyzw, r0.xyzw);
//   r1.z = dot(cb0[16].xyzw, r0.xyzw);
//   r1.w = 1;
//   r0.x = dot(cb0[11].xyzw, r1.xyzw);
//   r0.y = dot(cb0[12].xyzw, r1.xyzw);
//   r0.z = dot(cb0[13].xyzw, r1.xyzw);
//   r0.w = 1;
//   o0.x = dot(cb4[0].xyzw, r0.xyzw);
//   o0.y = dot(cb4[1].xyzw, r0.xyzw);
//   o0.z = dot(cb4[2].xyzw, r0.xyzw);
//   o0.w = dot(cb4[3].xyzw, r0.xyzw);
//   r0.w = dot(r0.xyz, r0.xyz);
//   r1.z = sqrt(r0.w);
//   r0.w = cmp(0 != cb3[1].x);
//   if (r0.w == 0) {
//     r0.w = -cb3[0].w + r1.z;
//     r0.w = -cb3[0].x + r0.w;
//     r0.w = max(0, r0.w);
//     r2.x = cb3[4].x * r0.w;
//     r2.x = 1.44269502 * r2.x;
//     r2.x = exp2(r2.x);
//     r2.x = rcp(r2.x);
//     r2.y = dot(cb3[2].xyz, r0.xyz);
//     r2.y = cb3[2].w + r2.y;
//     r2.y = saturate(cb3[3].w * r2.y);
//     r2.y = 1 + -r2.y;
//     r2.z = r2.y * r2.y;
//     r2.w = r2.z * r2.y;
//     r2.z = cb3[9].y * r2.z;
//     r2.z = cb3[9].x * r2.w + r2.z;
//     r2.y = cb3[9].z * r2.y + r2.z;
//     r2.y = saturate(cb3[9].w + r2.y);
//     r1.x = 1 + -r2.y;
//     r2.y = r1.z / cb3[0].y;
//     r0.w = cb3[0].z * r0.w;
//     r0.w = 1.44269502 * r0.w;
//     r0.w = exp2(r0.w);
//     r0.w = rcp(r0.w);
//     r2.z = r2.x + -r0.w;
//     r0.w = r1.x * r2.z + r0.w;
//     r2.y = 1 + -r2.y;
//     r2.y = saturate(1.42857146 * r2.y);
//     r0.w = min(r2.y, r0.w);
//     r2.y = saturate(r1.z / cb3[11].x);
//     r2.z = r2.y * r2.y;
//     r2.w = r2.z * r2.y;
//     r2.z = cb3[10].y * r2.z;
//     r2.z = cb3[10].x * r2.w + r2.z;
//     r2.z = cb3[10].z * r2.y + r2.z;
//     r2.z = saturate(cb3[10].w + r2.z);
//     r2.z = 1 + -r2.z;
//     r2.x = r2.x + -r2.z;
//     r2.x = r1.x * r2.x + r2.z;
//     r2.z = saturate(cb3[0].y / cb3[11].x);
//     r2.w = max(0.00100000005, cb3[11].y);
//     r2.z = r2.z + -r2.w;
//     r3.x = r2.z * r2.z;
//     r3.y = r3.x * r2.z;
//     r3.x = cb3[10].y * r3.x;
//     r3.x = cb3[10].x * r3.y + r3.x;
//     r3.x = cb3[10].z * r2.z + r3.x;
//     r3.x = saturate(cb3[10].w + r3.x);
//     r2.y = r2.y + -r2.z;
//     r2.z = 1 + -r3.x;
//     r2.z = r2.y * r2.z;
//     r2.z = r2.z / r2.w;
//     r2.z = r2.z + r3.x;
//     r2.z = saturate(1 + -r2.z);
//     r2.y = saturate(r2.y / r2.w);
//     r2.z = r2.z + -r2.x;
//     r2.y = r2.y * r2.z + r2.x;
//     r2.x = min(r2.x, r2.y);
//     r0.w = -r2.x + r0.w;
//     r1.y = cb3[11].z * r0.w + r2.x;
//   } else {
//     r0.w = cb3[1].y + -r1.z;
//     r1.y = saturate(cb3[1].z * r0.w);
//     r1.x = 0;
//   }
//   o1.xyzw = float4(0.5,0.5,0.5,1) * v1.xyzw;
//   o2.xyz = r0.xyz;
//   o2.w = cb0[1].x;
//   o4.xy = v2.xy;
//   p4.xy = v3.xy;
//   r1.w = 0;
//   o5.xyzw = r1.yxzw;
//   o3.xyz = float3(0,0,1);

//   if (iniParams.x != 0 && iniParams10.x == 10 && iniParams10.y == 100)
//   {
//   o0.x-=stereo.x * (o0.w - stereo.y);
//   o0.x+=stereo.x * o0.w * (1 - stereo.y * iniParams.x);
//   }

//   else if (iniParams10.x == 10 && iniParams10.y == 100)
//   o0.x-=stereo.x * (o0.w - stereo.y);

//   return;
// }

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
//
// Generated by Microsoft (R) D3D Shader Disassembler
//
//   using 3Dmigoto v1.3.16 on Mon Jun 21 11:40:36 2021
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// POSITION                 0   xyz         0     NONE   float   xyz
// COLOR                    0   xyzw        1     NONE   float   xyzw
// TEXCOORD                 0   xy          2     NONE   float   xy
// TEXCOORD                 1   xy          3     NONE   float   xy
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyzw        0      POS   float   xyzw
// COLOR                    0   xyzw        1     NONE   float   xyzw
// TEXCOORD                 0   xyzw        2     NONE   float   xyzw
// TEXCOORD                 1   xyz         3     NONE   float   xyz
// TEXCOORD                 2   xy          4     NONE   float   xy
// TEXCOORD                 3     zw        4     NONE   float     zw
// TEXCOORD                 6   xyzw        5     NONE   float   xyzw
//
vs_5_0
dcl_globalFlags refactoringAllowed
dcl_constantbuffer CB4[4], immediateIndexed
dcl_constantbuffer CB0[17], immediateIndexed
dcl_constantbuffer CB3[12], immediateIndexed
dcl_input v0.xyz
dcl_input v1.xyzw
dcl_input v2.xy
dcl_input v3.xy
dcl_output_siv o0.xyzw, position
dcl_output o1.xyzw
dcl_output o2.xyzw
dcl_output o3.xyz
dcl_output o4.xy
dcl_output o4.zw
dcl_output o5.xyzw
dcl_temps 60

dcl_resource_texture1d (float,float,float,float) t120
dcl_resource_texture2d (float,float,float,float) t125
ld_indexable(texture2d)(float,float,float,float) r40.xyzw, l(0, 0, 0, 0), t125.xyzw
ld_indexable(texture1d)(float,float,float,float) r41.xyzw, l(0, 0, 0, 0), t120.xyzw
ld_indexable(texture1d)(float,float,float,float) r42.xyzw, l(10, 0, 0, 0), t120.xyzw

mov [precise(xyz)] r0.xyz, v0.xyzx
mov [precise(w)] r0.w, l(1.000000)
dp4 [precise(x)] r1.x, cb0[14].xyzw, r0.xyzw
dp4 [precise(y)] r1.y, cb0[15].xyzw, r0.xyzw
dp4 [precise(z)] r1.z, cb0[16].xyzw, r0.xyzw
mov [precise(w)] r1.w, l(1.000000)
dp4 [precise(x)] r0.x, cb0[11].xyzw, r1.xyzw
dp4 [precise(y)] r0.y, cb0[12].xyzw, r1.xyzw
dp4 [precise(z)] r0.z, cb0[13].xyzw, r1.xyzw
mov [precise(w)] r0.w, l(1.000000)

dp4 [precise(x)] r10.x, cb4[0].xyzw, r0.xyzw
dp4 [precise(y)] r10.y, cb4[1].xyzw, r0.xyzw
dp4 [precise(z)] r10.z, cb4[2].xyzw, r0.xyzw
dp4 [precise(w)] r10.w, cb4[3].xyzw, r0.xyzw

dp3 r0.w, r0.xyzx, r0.xyzx
sqrt r1.z, r0.w
ne r0.w, l(0.000000, 0.000000, 0.000000, 0.000000), cb3[1].x
if_z r0.w
  add r0.w, r1.z, -cb3[0].w
  add r0.w, r0.w, -cb3[0].x
  max r0.w, r0.w, l(0.000000)
  mul r2.x, r0.w, cb3[4].x
  mul r2.x, r2.x, l(1.442695)
  exp r2.x, r2.x
  rcp r2.x, r2.x
  dp3 r2.y, cb3[2].xyzx, r0.xyzx
  add r2.y, r2.y, cb3[2].w
  mul_sat r2.y, r2.y, cb3[3].w
  add r2.y, -r2.y, l(1.000000)
  mul r2.z, r2.y, r2.y
  mul r2.w, r2.y, r2.z
  mul r2.z, r2.z, cb3[9].y
  mad r2.z, cb3[9].x, r2.w, r2.z
  mad r2.y, cb3[9].z, r2.y, r2.z
  add_sat r2.y, r2.y, cb3[9].w
  add r1.x, -r2.y, l(1.000000)
  div r2.y, r1.z, cb3[0].y
  mul r0.w, r0.w, cb3[0].z
  mul r0.w, r0.w, l(1.442695)
  exp r0.w, r0.w
  rcp r0.w, r0.w
  add r2.z, -r0.w, r2.x
  mad r0.w, r1.x, r2.z, r0.w
  add r2.y, -r2.y, l(1.000000)
  mul_sat r2.y, r2.y, l(1.42857146)
  min r0.w, r0.w, r2.y
  div_sat r2.y, r1.z, cb3[11].x
  mul r2.z, r2.y, r2.y
  mul r2.w, r2.y, r2.z
  mul r2.z, r2.z, cb3[10].y
  mad r2.z, cb3[10].x, r2.w, r2.z
  mad r2.z, cb3[10].z, r2.y, r2.z
  add_sat r2.z, r2.z, cb3[10].w
  add r2.z, -r2.z, l(1.000000)
  add r2.x, -r2.z, r2.x
  mad r2.x, r1.x, r2.x, r2.z
  div_sat r2.z, cb3[0].y, cb3[11].x
  max r2.w, cb3[11].y, l(0.001000)
  add r2.z, -r2.w, r2.z
  mul r3.x, r2.z, r2.z
  mul r3.y, r2.z, r3.x
  mul r3.x, r3.x, cb3[10].y
  mad r3.x, cb3[10].x, r3.y, r3.x
  mad r3.x, cb3[10].z, r2.z, r3.x
  add_sat r3.x, r3.x, cb3[10].w
  add r2.y, -r2.z, r2.y
  add r2.z, -r3.x, l(1.000000)
  mul r2.z, r2.z, r2.y
  div r2.z, r2.z, r2.w
  add r2.z, r3.x, r2.z
  add_sat r2.z, -r2.z, l(1.000000)
  div_sat r2.y, r2.y, r2.w
  add r2.z, -r2.x, r2.z
  mad r2.y, r2.y, r2.z, r2.x
  min r2.x, r2.y, r2.x
  add r0.w, r0.w, -r2.x
  mad r1.y, cb3[11].z, r0.w, r2.x
else
  add r0.w, -r1.z, cb3[1].y
  mul_sat r1.y, r0.w, cb3[1].z
  mov r1.x, l(0)
endif
mul o1.xyzw, v1.xyzw, l(0.500000, 0.500000, 0.500000, 1.000000)
mov [precise(xyz)] o2.xyz, r0.xyzx
mov o2.w, cb0[1].x
mov o4.xy, v2.xyxx
mov o4.zw, v3.xxxy
mov r1.w, l(0)
mov o5.xyzw, r1.yxzw
mov o3.xyz, l(0,0,1.000000,0)

eq r50.x, r41.x, l(0.0)
eq r51.x, r42.x, l(10.0)
eq r52.x, r42.y, l(100.0)
if_nz r52.x
if_nz r51.x
add r11.x, r10.w, -r40.y
mad r10.x, -r40.x, r11.x, r10.x
    if_z r50.x
    mad r11.x, -r40.y, r41.x, l(1.0)
    mul r11.x, r11.x, r10.w
    mad r10.x, r40.x, r11.x, r10.x
    endif
endif
endif

mov o0.xyzw, r10.xyzw

ret
// Approximately 0 instruction slots used