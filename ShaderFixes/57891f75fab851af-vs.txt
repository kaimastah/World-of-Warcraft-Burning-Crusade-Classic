// character panel 15
// cbuffer cb0 : register(b0)
// {
//   float4 cb0[782];
// }

// cbuffer cb4 : register(b4)
// {
//   float4 cb4[4];
// }




// // 3Dmigoto declarations
// #define cmp -
// Texture1D<float4> IniParams : register(t120);
// Texture2D<float4> StereoParams : register(t125);


// void main(
//   float3 v0 : POSITION0,
//   float4 v1 : BLENDWEIGHT0,
//   uint4 v2 : BLENDINDICES0,
//   float3 v3 : NORMAL0,
//   float2 v4 : TEXCOORD0,
//   out float4 o0 : SV_POSITION0,
//   out float4 o1 : COLOR0,
//   out float4 o2 : TEXCOORD0,
//   out float4 o3 : TEXCOORD1,
//   out float2 o4 : TEXCOORD2)
// {
//   float4 r0,r1,r2,r3,r4,r5;
//   uint4 bitmask, uiDest;
//   float4 fDest;

//   float4 stereo = StereoParams.Load(0);
//   float4 iniParams = IniParams.Load(0);
//   float4 iniParams10 = IniParams.Load(int2(10,0));

//   r0.xyzw = (int4)v2.xyzw * int4(3,3,3,3);
//   r1.xyzw = cb0[r0.x+14].xyzw * v1.xxxx;
//   r2.xyzw = cb0[r0.y+14].xyzw * v1.yyyy;
//   r1.xyzw = r2.xyzw + r1.xyzw;
//   r2.xyzw = cb0[r0.z+14].xyzw * v1.zzzz;
//   r1.xyzw = r2.xyzw + r1.xyzw;
//   r2.xyzw = cb0[r0.w+14].xyzw * v1.wwww;
//   r1.xyzw = r2.xyzw + r1.xyzw;
//   r2.xyz = v0.xyz;
//   r2.w = 1;
//   r3.x = dot(r1.xyzw, r2.xyzw);
//   r1.x = dot(r1.xyz, v3.xyz);
//   r4.xyzw = cb0[r0.x+15].xyzw * v1.xxxx;
//   r5.xyzw = cb0[r0.y+15].xyzw * v1.yyyy;
//   r4.xyzw = r5.xyzw + r4.xyzw;
//   r5.xyzw = cb0[r0.z+15].xyzw * v1.zzzz;
//   r4.xyzw = r5.xyzw + r4.xyzw;
//   r5.xyzw = cb0[r0.w+15].xyzw * v1.wwww;
//   r4.xyzw = r5.xyzw + r4.xyzw;
//   r3.y = dot(r4.xyzw, r2.xyzw);
//   r1.y = dot(r4.xyz, v3.xyz);
//   r4.xyzw = cb0[r0.x+16].xyzw * v1.xxxx;
//   r5.xyzw = cb0[r0.y+16].xyzw * v1.yyyy;
//   r4.xyzw = r5.xyzw + r4.xyzw;
//   r5.xyzw = cb0[r0.z+16].xyzw * v1.zzzz;
//   r0.xyzw = cb0[r0.w+16].xyzw * v1.wwww;
//   r4.xyzw = r5.xyzw + r4.xyzw;
//   r0.xyzw = r4.xyzw + r0.xyzw;
//   r3.z = dot(r0.xyzw, r2.xyzw);
//   r1.z = dot(r0.xyz, v3.xyz);
//   r3.w = 1;
//   r0.x = dot(cb0[11].xyzw, r3.xyzw);
//   r0.y = dot(cb0[12].xyzw, r3.xyzw);
//   r0.z = dot(cb0[13].xyzw, r3.xyzw);
//   r0.w = 1;
//   o0.x = dot(cb4[0].xyzw, r0.xyzw);
//   o0.y = dot(cb4[1].xyzw, r0.xyzw);
//   o0.z = dot(cb4[2].xyzw, r0.xyzw);
//   o0.w = dot(cb4[3].xyzw, r0.xyzw);
//   o2.xyz = r0.xyz;
//   r0.xyzw = saturate(cb0[7].xyzw + cb0[6].xyzw);
//   o1.xyzw = float4(0.5,0.5,0.5,1) * r0.xyzw;
//   o2.w = cb0[1].x;
//   r0.x = dot(r1.xyz, r1.xyz);
//   r0.x = rsqrt(r0.x);
//   r0.xyz = r1.xyz * r0.xxx;
//   r1.x = dot(cb0[11].xyz, r0.xyz);
//   r1.y = dot(cb0[12].xyz, r0.xyz);
//   r1.z = dot(cb0[13].xyz, r0.xyz);
//   r0.x = dot(r1.xyz, r1.xyz);
//   r0.x = rsqrt(r0.x);
//   o3.xyz = r1.xyz * r0.xxx;
//   o4.xy = float2(0,0);

//   if (iniParams.x != 0 && iniParams10.x == 10 && iniParams10.y == 100)
//   {
//   o0.x-=stereo.x * (o0.w - stereo.y);
//   o0.x+=stereo.x * o0.w * (1 - stereo.y * iniParams.x);
//   }

//   else if (iniParams10.x == 10 && iniParams10.y == 100)
//   o0.x-=stereo.x * (o0.w - stereo.y);

//   return;
// }

// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
//
// Generated by Microsoft (R) D3D Shader Disassembler
//
//   using 3Dmigoto v1.3.16 on Fri Jun 25 19:50:09 2021
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// POSITION                 0   xyz         0     NONE   float   xyz
// BLENDWEIGHT              0   xyzw        1     NONE   float   xyzw
// BLENDINDICES             0   xyzw        2     NONE    uint   xyzw
// NORMAL                   0   xyz         3     NONE   float   xyz
// TEXCOORD                 0   xy          4     NONE   float
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyzw        0      POS   float   xyzw
// COLOR                    0   xyzw        1     NONE   float   xyzw
// TEXCOORD                 0   xyzw        2     NONE   float   xyzw
// TEXCOORD                 1   xyz         3     NONE   float   xyz
// TEXCOORD                 2   xy          4     NONE   float   xy
//
vs_5_0
dcl_globalFlags refactoringAllowed
dcl_constantbuffer CB4[4], immediateIndexed
dcl_constantbuffer CB0[782], dynamicIndexed
dcl_input v0.xyz
dcl_input v1.xyzw
dcl_input v2.xyzw
dcl_input v3.xyz
dcl_output_siv o0.xyzw, position
dcl_output o1.xyzw
dcl_output o2.xyzw
dcl_output o3.xyz
dcl_output o4.xy
dcl_temps 60

dcl_resource_texture1d (float,float,float,float) t120
dcl_resource_texture2d (float,float,float,float) t125
ld_indexable(texture2d)(float,float,float,float) r40.xyzw, l(0, 0, 0, 0), t125.xyzw
ld_indexable(texture1d)(float,float,float,float) r41.xyzw, l(0, 0, 0, 0), t120.xyzw
ld_indexable(texture1d)(float,float,float,float) r42.xyzw, l(10, 0, 0, 0), t120.xyzw

imul [precise] null, r0.xyzw, v2.xyzw, l(3, 3, 3, 3)
mul [precise] r1.xyzw, v1.xxxx, cb0[r0.x + 14].xyzw
mul [precise] r2.xyzw, v1.yyyy, cb0[r0.y + 14].xyzw
add [precise] r1.xyzw, r1.xyzw, r2.xyzw
mul [precise] r2.xyzw, v1.zzzz, cb0[r0.z + 14].xyzw
add [precise] r1.xyzw, r1.xyzw, r2.xyzw
mul [precise] r2.xyzw, v1.wwww, cb0[r0.w + 14].xyzw
add [precise] r1.xyzw, r1.xyzw, r2.xyzw
mov [precise(xyz)] r2.xyz, v0.xyzx
mov [precise(w)] r2.w, l(1.000000)
dp4 [precise(x)] r3.x, r1.xyzw, r2.xyzw
dp3 [precise(x)] r1.x, r1.xyzx, v3.xyzx
mul [precise] r4.xyzw, v1.xxxx, cb0[r0.x + 15].xyzw
mul [precise] r5.xyzw, v1.yyyy, cb0[r0.y + 15].xyzw
add [precise] r4.xyzw, r4.xyzw, r5.xyzw
mul [precise] r5.xyzw, v1.zzzz, cb0[r0.z + 15].xyzw
add [precise] r4.xyzw, r4.xyzw, r5.xyzw
mul [precise] r5.xyzw, v1.wwww, cb0[r0.w + 15].xyzw
add [precise] r4.xyzw, r4.xyzw, r5.xyzw
dp4 [precise(y)] r3.y, r4.xyzw, r2.xyzw
dp3 [precise(y)] r1.y, r4.xyzx, v3.xyzx
mul [precise] r4.xyzw, v1.xxxx, cb0[r0.x + 16].xyzw
mul [precise] r5.xyzw, v1.yyyy, cb0[r0.y + 16].xyzw
add [precise] r4.xyzw, r4.xyzw, r5.xyzw
mul [precise] r5.xyzw, v1.zzzz, cb0[r0.z + 16].xyzw
mul [precise] r0.xyzw, v1.wwww, cb0[r0.w + 16].xyzw
add [precise] r4.xyzw, r4.xyzw, r5.xyzw
add [precise] r0.xyzw, r0.xyzw, r4.xyzw
dp4 [precise(z)] r3.z, r0.xyzw, r2.xyzw
dp3 [precise(z)] r1.z, r0.xyzx, v3.xyzx
mov [precise(w)] r3.w, l(1.000000)
dp4 [precise(x)] r0.x, cb0[11].xyzw, r3.xyzw
dp4 [precise(y)] r0.y, cb0[12].xyzw, r3.xyzw
dp4 [precise(z)] r0.z, cb0[13].xyzw, r3.xyzw
mov [precise(w)] r0.w, l(1.000000)

dp4 [precise(x)] r10.x, cb4[0].xyzw, r0.xyzw
dp4 [precise(y)] r10.y, cb4[1].xyzw, r0.xyzw
dp4 [precise(z)] r10.z, cb4[2].xyzw, r0.xyzw
dp4 [precise(w)] r10.w, cb4[3].xyzw, r0.xyzw

mov [precise(xyz)] o2.xyz, r0.xyzx
add_sat r0.xyzw, cb0[6].xyzw, cb0[7].xyzw
mul o1.xyzw, r0.xyzw, l(0.500000, 0.500000, 0.500000, 1.000000)
mov o2.w, cb0[1].x
dp3 [precise(x)] r0.x, r1.xyzx, r1.xyzx
rsq [precise(x)] r0.x, r0.x
mul [precise(xyz)] r0.xyz, r0.xxxx, r1.xyzx
dp3 [precise(x)] r1.x, cb0[11].xyzx, r0.xyzx
dp3 [precise(y)] r1.y, cb0[12].xyzx, r0.xyzx
dp3 [precise(z)] r1.z, cb0[13].xyzx, r0.xyzx
dp3 [precise(x)] r0.x, r1.xyzx, r1.xyzx
rsq [precise(x)] r0.x, r0.x
mul [precise(xyz)] o3.xyz, r0.xxxx, r1.xyzx
mov o4.xy, l(0,0,0,0)

eq r50.x, r41.x, l(0.0)
eq r51.x, r42.x, l(10.0)
eq r52.x, r42.y, l(100.0)
if_nz r52.x
if_nz r51.x
add r11.x, r10.w, -r40.y
mad r10.x, -r40.x, r11.x, r10.x
    if_z r50.x
    mad r11.x, -r40.y, r41.x, l(1.0)
    mul r11.x, r11.x, r10.w
    mad r10.x, r40.x, r11.x, r10.x
    endif
endif
endif

mov o0.xyzw, r10.xyzw

ret
// Approximately 0 instruction slots used
